/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  
  const app = express();

  let todos=[];
  let idNumber = 0;
  
  app.use(bodyParser.json());

  app.get('/todos', function(req, res){
    // fs.readFile('./todos.json', function(error, data){
    //   if(error) res.status(404).send('Error in reading the todos file');
    //   else{
    //     res.status(200).json(data);
    //   }
    // })
    res.status(200).json(todos);
  })

  app.get('/todos/:id', function(req, res){
    let found = false;
    const id = req.params.id;
    for(let i=0; i < todos.length;i++){
      if(todos[i]["todoID"] == id){
        found = true;
        res.status(200).json(todos[i]["title"]);
      }
    }
    if(!found) res.status(404).send("No todo found with the ID")
  })

  app.post('/todos', function(req,res){
    const title = req.body["title"];
    const desc = req.body["description"];
    const completed = req.body["completed"]
    idNumber++;
    todos.push({
      todoTitle: title,
      todoDesc: desc,
      status: completed,
      todoID: idNumber
    })
    res.status(201).json(todos[todos.length-1]);
  })

  app.put('/todos/:id', function(req,res){
    const id = req.params.id;
    let found = false;
    for(let i=0; i < todos.length;i++){
      if(todos[i]["todoID"] == id){
        found = true;
        todos[i]["status"] = !todos[i]["status"];
        res.status(200).send('Todo Item updated');
      }
    }
    if(!found) res.status(404).send("Todo with given ID not found");
  })

  app.delete('/todos/:id', function(req,res){
    const id = req.params.id;
    let found = false;
    for(let i=0; i < todos.length;i++){
      if(todos[i]["todoID"] == id){
        found = true;
        todos.splice(i, 1);             //Splice is a method that is used to delete an element in an array  
        res.status(200).send(`Todo Item with ID ${id} deleted`);
      }
    }
    if(!found) res.status(404).send("Todo with given ID not found");
  })

  app.use((req, res)=>{
    res.status(404).send("The page your looking for is not found!");
  })

  app.listen(3000, ()=> console.log('Port opened at port 3000'))
  
  module.exports = app;